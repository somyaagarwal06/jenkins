{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "resourceName": {
            "type": "string",
            "metadata": {
                "description": "The name of the Managed Cluster resource."
            }
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "The location of AKS resource."
            }
        },
        "dnsPrefix": {
            "type": "string",
            "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
            }
        },
        "agentPoolCount":{
            "type": "int",
            "metadata": {
                "description": "Number of the Agent pool"
            },
            "defaultValue": 1
        },
        "osDiskSizeGB": {
            "type": "int",
            "defaultValue": 0,
            "metadata": {
                "description": "Disk size (in GiB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
            },
            "minValue": 0,
            "maxValue": 1023
        },
        "agentCount": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The number of agent nodes for the cluster."
            },
            "minValue": 1,
            "maxValue": 100
        },
        "agentVMSize": {
            "type": "string",
            "defaultValue": "Standard_DS2_v2",
            "metadata": {
                "description": "The size of the Virtual Machine."
            }
        },
        "osType": {
            "type": "string",
            "defaultValue": "Linux",
            "metadata": {
                "description": "The type of operating system."
            }
        },
        "kubernetesVersion": {
            "type": "string",
            "defaultValue": "1.17.11",
            "metadata": {
                "description": "The version of Kubernetes."
            }
        },
        "enableAvailabilityZones": {
            "type": "array",
            "defaultValue": ["1","2","3"],
            "metadata": {
                "description": "Enable Availability Zones"
            }
        },
        "az": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Boolean flag to turn on and off availability zones."
            }
        },
        "agentPoolName": {
            "type": "string",
            "defaultValue": "agentpool",
            "metadata": {
                "description": "Names of Agent Pool Available"
            }
        },
         "labelKey": {
            "type": "string",
            "defaultValue": "labelKey",
            "metadata": {
                "description": "Names of label Key"
            }
        },
         "labelValue": {
            "type": "string",
            "defaultValue": "agentpool",
            "metadata": {
                "description": "Names of Agent Label Value"
            }
        },
        "networkPlugin": {
            "type": "string",
            "allowedValues": [
                "azure",
                "kubenet"
            ],
            "metadata": {
                "description": "Network plugin used for building Kubernetes network."
            }
        },
        "networkPolicy": {
			"allowedValues": [
				"azure",
				"calico"
			],
			"type": "string",
			"metadata": {
				"description": "Network policy to define rules for ingress and egress traffic between pods."
			}
		}, 
        "maxPods": {
            "type": "int",
            "defaultValue": 30,
            "metadata": {
                "description": "Maximum number of pods that can run on a node."
            }
        },
        "minCount": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "Minimum number of node on cluster."
            }
        },
		"enableAutoScaling": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Boolean flag to turn on and off auto-scaling."
            }
        },        
		"maxCount": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "Maximum number of nodes on cluster after auto-scaling."
            }
        },
        "scanInterval": {
            "type": "string",
            "defaultValue": "10s",
            "metadata": {
                "description": "Scan interval."
            }
        },
        "scaleDownDelayAfterAdd": {
            "type": "string",
            "defaultValue": "10m",
            "metadata": {
                "description": "scale down delay after add."
            }
        },
        "scaleDownDelayAfterDelete": {
            "type": "string",
            "defaultValue": "10s",
            "metadata": {
                "description": "Scale down delay after delete."
            }
        },
        "scaleDownDelayAfterFailure": {
            "type": "string",
            "defaultValue": "3m",
            "metadata": {
                "description": "Scale down delay after failure."
            }
        },
        "scaleDownUnneededTime": {
            "type": "string",
            "defaultValue": "10m",
            "metadata": {
                "description": "Scale Down Unneeded time."
            }
        },
        "scaleDownUnreadyTime": {
            "type": "string",
            "defaultValue": "20m",
            "metadata": {
                "description": "Scale down unready time."
            }
        },
        "scaleDownUtilizationThreshold": {
            "type": "string",
            "defaultValue": "0.5",
            "metadata": {
                "description": "Scale down utilization threshold."
            }
        },
        "maxGracefulTerminationSec": {
            "type": "string",
            "defaultValue": "600",
            "metadata": {
                "description": "Max graceful termination sec."
            }
        },
        "enableRBAC": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Boolean flag to turn on and off of RBAC."
            }
        },
        "vmssNodePool": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Boolean flag to turn on and off of VM scale sets"
            }
        },
        "windowsProfile": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Boolean flag to turn on and off of VM scale sets"
            }
        },
        "aadSessionKey": {
            "type": "securestring",
            "defaultValue": ""
        },
        "enableHttpApplicationRouting": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Boolean flag to turn on and off of http application routing."
            }
        },
        "serviceCidr": {
            "type": "string",
            "metadata": {
                "description": "A CIDR notation IP range from which to assign service cluster IPs."
            }
        },
        "dnsServiceIP": {
            "type": "string",
            "metadata": {
                "description": "Containers DNS server IP address."
            }
        },
        "dockerBridgeCidr": {
            "type": "string",
            "metadata": {
                "description": "A CIDR notation IP for Docker bridge."
            }
        },
		"linuxAdminUsername": {
           "type": "string",
           "metadata": {
               "description": "User name for the Linux Virtual Machines."
           }
       },
       "sshRSAPublicKey": {
           "type": "string",
           "metadata": {
               "description": "Configure all linux machines with the SSH RSA public key string. Your key should include three parts, for example 'ssh-rsa AAAAB...snip...UcyupgH azureuser@linuxvm'"
           }
       }
    },
    "variables": {
        "az":"[parameters('az')]",
        "enableAvailabilityZones":"[parameters('enableAvailabilityZones')]",
        "agentPoolName":"[parameters('agentPoolName')]",
        "labelKey":"[parameters('labelKey')]",
        "labelValue":"[parameters('labelValue')]"
    },
    "resources": [        
        {
            "apiVersion": "2019-08-01",
            "dependsOn": [],
            "type": "Microsoft.ContainerService/managedClusters",
            "location": "[parameters('location')]",
            "name": "[parameters('resourceName')]",
            "identity": {
                "type": "SystemAssigned"
                },
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "enableRBAC": "[parameters('enableRBAC')]",
                "dnsPrefix": "[parameters('dnsPrefix')]",
                "agentPoolProfiles": [
                    {
                        "name": "[parameters('agentPoolName')]",
                        "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                        "count": "[parameters('agentCount')]",
                        "vmSize": "[parameters('agentVMSize')]",
                        "osType": "[parameters('osType')]",
                        "storageProfile": "ManagedDisks",
                        "type": "VirtualMachineScaleSets",
                        "enableAutoScaling": "[parameters('enableAutoScaling')]",
						"minCount": "[parameters('minCount')]",
						"maxCount": "[parameters('maxCount')]",
                        "availabilityZones": "[if(equals(parameters('az'),'true'),variables('enableAvailabilityZones'),json('null'))]",
                        "nodeLabels": {
                            "[parameters('labelKey')]": "[parameters('labelValue')]"
                        }
                    }
                ],
				"linuxProfile": {
                   "adminUsername": "[parameters('linuxAdminUsername')]",
                   "ssh": {
                       "publicKeys": [
                           {
                               "keyData": "[parameters('sshRSAPublicKey')]"
                           }
                       ]
                   }
               },
                "autoScalerProfile": {
                    "scan-interval": "[parameters('scanInterval')]",
                    "scale-down-delay-after-add": "[parameters('scaleDownDelayAfterAdd')]",
                    "scale-down-delay-after-delete": "[parameters('scaleDownDelayAfterDelete')]",
                    "scale-down-delay-after-failure": "[parameters('scaleDownDelayAfterFailure')]",
                    "scale-down-unneeded-time": "[parameters('scaleDownUnneededTime')]",
                    "scale-down-unready-time": "[parameters('scaleDownUnreadyTime')]",
                    "scale-down-utilization-threshold": "[parameters('scaleDownUtilizationThreshold')]",
                    "max-graceful-termination-sec": "[parameters('maxGracefulTerminationSec')]"
                },
                "networkProfile": {
                    "loadBalancerSku": "standard",
                    "networkPlugin": "[parameters('networkPlugin')]",
                    "networkPolicy": "[parameters('networkPolicy')]",
                    "serviceCidr": "[parameters('serviceCidr')]",
                    "podCidr": "10.244.0.0/16",
                    "dnsServiceIP": "[parameters('dnsServiceIP')]",
                    "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]"
                },
                "servicePrincipalProfile": {
                     "clientId": "msi"
                },
                "addonProfiles": {
                    "httpApplicationRouting": {
                        "enabled": "[parameters('enableHttpApplicationRouting')]"
                    },
					"omsagent": {
						"enabled": true,
						"config": {
						  "logAnalyticsWorkspaceResourceID": "/subscriptions/919f7a69-3ed0-453b-9ce8-ebf405bdf404/resourceGroups/defaultresourcegroup-eus/providers/microsoft.operationalinsights/workspaces/defaultworkspace-919f7a69-3ed0-453b-9ce8-ebf405bdf404-eus"
							}
						}
                }
            },
            "tags": {}
        }
	],
    "outputs": {
        "controlPlaneFQDN": {
            "type": "string",
            "value": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))).fqdn]"
        }
    }
}
